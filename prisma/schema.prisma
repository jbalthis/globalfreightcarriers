generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  //url      = env("DATABASE_URL")
  url = "mongodb+srv://gfc-db-admin:7Hf0512R9zT6tpk4@dbaas-db-6210824-5f35161f.mongo.ondigitalocean.com/gfc-db?authSource=admin&replicaSet=dbaas-db-6210824&tls=true"
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  email          String    @unique
  emailVerified  DateTime?
  image          String?
  name           String?
  role           String    @default("user")
  hashedPassword String
  post           Post[]
  profile        Profile[]
  session        Session[]
  account        Account[]

  @@unique([id, role])
}

model Post {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
  content   String
  published Boolean  @default(false)
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  String?  @map("author_id") @db.ObjectId
}

model Profile {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  bio       String?
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @map("user_id") @db.ObjectId
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  expiresAt    DateTime
  sessionToken String   @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String   @map("user_id") @db.ObjectId
  userRole     String   @map("user_role") @db.ObjectId
}

model Account {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  userId             String   @map("user_id") @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? 
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  token      String   @unique
  expires    DateTime

  @@unique([id, token])
}
